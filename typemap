TYPEMAP

negative_is_error		I_NEG_IS_ERROR
ALPM_Handle			T_ALPM_HANDLE
ALPM_DB				T_ALPM_DB
ALPM_LocalDB			T_ALPM_LOCALDB
ALPM_SyncDB			T_ALPM_SYNCDB
ALPM_Package			T_ALPM_PACKAGE
ALPM_PackageFree		T_ALPM_PACKAGEFREE
ALPM_PackageOrNull	T_ALPM_PACKAGEORNULL
ALPM_SigLevel			T_SIGLEVEL

PackageList		L_PACKAGE
DependList		L_DEPEND
StringList			L_STRING
StringListFree		L_STRINGFREE

alpm_pkgreason_t	T_PKGREASON
off_t				T_INT

#--------------------
# INPUT # Perl ==> C
#--------------------

INPUT
I_NEG_IS_ERROR
	$var = SvIV($arg)

T_ALPM_HANDLE
	if(sv_derived_from($arg, \"ALPM\")){
		$var = INT2PTR($type, SvIV((SV *)SvRV($arg)));
	}else{
		Perl_croak(\"error: expected an object of class ALPM\");
	}

T_ALPM_DB
	if(sv_derived_from($arg, \"ALPM::DB\")){
		IV tmp = SvIV((SV*)SvRV($arg));
		$var = INT2PTR($type, tmp);
	}else{
		Perl_croak(aTHX_ \"%s: %s is not of type %s\",
			${$ALIAS?\q[GvNAME(CvGV(cv))]:\qq[\"$pname\"]},
			\"$var\", \"ALPM::DB\")
	}

T_ALPM_LOCALDB
	if(sv_derived_from($arg, \"ALPM::DB::Local\")){
		IV tmp = SvIV((SV*)SvRV($arg));
		$var = INT2PTR($type, tmp);
	}else{
		Perl_croak(aTHX_ \"%s: %s is not of type %s\",
			${$ALIAS?\q[GvNAME(CvGV(cv))]:\qq[\"$pname\"]},
			\"$var\", \"ALPM::DB::Local\")
	}

T_ALPM_SYNCDB
	if(sv_derived_from($arg, \"ALPM::DB::Sync\")){
		IV tmp = SvIV((SV*)SvRV($arg));
		$var = INT2PTR($type, tmp);
	}else{
		Perl_croak(aTHX_ \"%s: %s is not of type %s\",
			${$ALIAS?\q[GvNAME(CvGV(cv))]:\qq[\"$pname\"]},
			\"$var\", \"ALPM::DB::Sync\")
	}

T_ALPM_PACKAGE
	if(sv_derived_from($arg, \"ALPM::Package\")){
		$var = INT2PTR($type, SvIV((SV *)SvRV($arg)));
	}else{
		Perl_croak(\"error: expected an ALPM::Package object\");
	}

T_ALPM_PACKAGEFREE
	if(sv_derived_from($arg, \"ALPM::PackageFree\")){
		IV tmp = SvIV((SV*)SvRV($arg));
		$var = INT2PTR($type,tmp);
	}else{
		Perl_croak(aTHX_ \"%s: %s is not of type %s\",
			${$ALIAS?\q[GvNAME(CvGV(cv))]:\qq[\"$pname\"]},
			\"$var\", \"ALPM::PackageFree\");
	}

T_SIGLEVEL
	$var = p2c_siglevel($arg);

T_PKGREASON
	$var = p2c_pkgreason($arg);

#---------------------
# OUTPUT # C ==> Perl
#---------------------

OUTPUT
I_NEG_IS_ERROR
	if($var != 0){
		croakalpm("ALPM");
	}
	$arg = newSViv(1);

T_ALPM_HANDLE
	if($var == NULL){
		# croakalpm expects a "alpm_handle_t *self" var to exist.
		croak(\"error: ALPM handle check failed\");
	}else{
		sv_setref_pv($arg, \"ALPM\", (void *)$var);
	}

T_ALPM_DB
	if($var == NULL){
		croakalpm("ALPM DB");
	}
	sv_setref_pv($arg, \"ALPM::DB\", (void *)$var);

T_ALPM_LOCALDB
	if($var == NULL){
		croakalpm("ALPM DB");
	}
	sv_setref_pv($arg, \"ALPM::DB::Local\", (void *)$var);

T_ALPM_SYNCDB
	if($var == NULL){
		croakalpm("ALPM DB");
	}
	sv_setref_pv($arg, \"ALPM::DB::Sync\", (void *)$var);

T_ALPM_PACKAGE
	if($var == NULL){
		croakalpm("ALPM Package");
	}
	sv_setref_pv($arg, \"ALPM::Package\", (void *)$var);

T_ALPM_PACKAGEFREE
	if($var == NULL){
		croakalpm("ALPM Package");
	}
	sv_setref_pv($arg, \"ALPM::PackageFree\", (void *)$var);

T_ALPM_PACKAGEORNULL
	if($var == NULL){
		$arg = &PL_sv_undef;
	}
	sv_setref_pv($arg, \"ALPM::Package\", (void *)$var);

T_SIGLEVEL
	$arg = c2p_siglevel($var);

T_PKGREASON
	$arg = c2p_pkgreason($var);

L_PACKAGE
	$arg = newRV_noinc((SV*)list2av($var, c2p_pkg));

L_DEPEND
	$arg = newRV_noinc((SV*)list2av($var, c2p_depend));

L_STRING
	$arg = newRV_noinc((SV*)list2av($var, c2p_str));

L_STRINGFREE
	$arg = newRV_noinc((SV*)list2av($var, c2p_str));
	ZAPLIST($var, free);